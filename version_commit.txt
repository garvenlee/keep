第一版本：
    后台->Flask
        开发了用户登陆、注册、更改密码的相关代码
    App->Flutter
        1.app入口界面
            => 采用轮播形式，用于跳转选择登录或者注册
            => 预开发指纹解锁的功能，还在探索中
        2.登陆界面、注册界面、重置密码界面以及完善的前后端交互逻辑
        3.简单的主页视图(只有三个Tab布局，每一部分还需要进一步完善)
            => 主页采用TabView, 共三个Tab,从左到右依次是
            => Noting(显示简短的文字记录)
            => Todo(显示Todo Item)
            => User(显示Message)
        4.在服务器端采用hash保存用户密码
            => 之后或考虑post请求数据的加密问题

第二版本：
    后台->Node
        1.重写了登录、注册、密码更改的后台逻辑
        2.重写并扩充了数据库
            => 重写User表
            => 增加FriendShip表、UserImage表、Message表、Room表、RoomClient表
            => FriendShip维系好友关系
            => UserImage维系用户头像
            => Message、Room、RoomClient三张表主要用于实现用户协同，还需要进一步开发
        3.增加了socket.io部分功能，支持聊天室
            => 但尚未实现点对点通信和创建不同房间的功能
        4.增加了获取好友列表的后台逻辑
            => 目前尚未开发添加好友的功能，只是在数据库中手动添加用户关系用以测试
        5.增加了上传用户头像的功能
            => 目前仅支持图像的矩形裁剪，不支持缩放、旋转
    app->Flutter
        1.增加了app侧边栏
            => 实现了好友列表(contacts)的路由跳转与页面显示
            => 实现了登出(Log out)的路由跳转(回退到登录页)
            => 实现了设置页(Settings)的路由跳转与页面显示
                => 设置页内部实现了图片上传
                => 设置页内的其他项还有待进一步实现
                    -> 用户名更改
                    -> 用户个性签名更改(数据库尚未添加这个字段)
                    !!!难点1：考虑怎么追踪用户状态(active/inactive)
                    !!!难点2：考虑实现聊天页的背景等其他设置自定义(Chat Settings)
                    !!!难点3：不同设备同步问题(Devices) 
                    !!!难点4：消息提示/本地推送设置(Notifications and Sounds)
            => 侧边栏其他功能的路由跳转与相关页面显示还没有实现
        2.增加实现了消息列表界面
        3.增加实现了聊天界面，包括消息，用户名和发送时间
            => 聊天页点击右上角进入用户信息页(仿微信)，有待进一步实现
            => 尚未实现离线信息发送错误提示
            => 尚未实现历史消息同步
        4.增加实现了搜索顶部栏几面，用于搜索好友用户
            => 但搜索逻辑尚未实现(等待可以添加好友列表之后再实现)

        修改如下：
        5.将第一版的异步键值对存储改为同步的键值对存储
            => 解决了异步值获取不及时而造成界面卡顿的情况
            => 解决了登录状态的管理，但因为状态管理没有抽象成一个类导致代码有点乱(有时间等到最后再改)
            => 解决了重启应用后闪现登录页的情况
            !!! 但启动应用后出现黑屏或白屏的情况还没有找到好的解决办法
        6.使用路由传参解决了上传图片后其他页面的图片更新问题
            => 有时还是会出现卡顿的情况
            => 有待进一步优化

第三版本
    后台->Node: 
        1.将http与socket与主文件app.js分离开
        2.添加http token验证与socket apiKey验证
        3.改动服务器用户密码保存，使用加密方式
            但http传输过程还没有实现字符加密，应该考虑添加ssl，实现https通信
        4.添加好友请求与用户消息推送相关代码，基本实现点对点通信功能

    app->Flutter
        1.添加启动页，解决启动黑屏
        2.添加图片预加载，部分解决图片渲染慢的问题，方式还有待进一步优化
        3.引入provider，更改用户状态监听方式
        4.引入procider，解决图片更新卡顿
        5.引入全局事件监听bus，用于不同页面事件触发
            使用flutter_local_notification实现消息提醒显示
            ->聊天消息提醒
            ->好友请求提醒
            提醒弹出框还需要进一步美化
        6.完成好友请求与好友消息推送
            封装全局socket包装类，维持长连接
            添加chat消息本地数据库sqlite
            使用BLoc模式，配合FutureBuilder完成消息页和聊天界面的加载
            -> 具体的，考虑离线发送与在线发送时，消息页面选项与聊天界面文本框的本地数据同步
                => 尚未实现终端消息同步与历史消息回溯
            -> 添加长按文本的弹出菜单，并实现本地的删除
                => 尚未实现消息页面选项的删除和置顶功能
        7.添加剪切板数据监听
            在主页监听剪切板网络链接
            引入webview，实现网络链接页面的app内显示
            具体页面尚未实现，另外据说webview不是个很好的东西，还需进一步研究
        8.添加网络监控功能
        9.抽离SpUtil相关代码，合成到/data/provider里面去，统一调用
        10.抽离ip:port到global/config.dart中，方便管理
